class Task:
    """Task Class used in the Worklog
    """

    name = None
    date = None
    notes = None
    time = None

    def __init__(self, name, time, notes, date):
        """[summary]
        
        Arguments:
            name {[type]} -- [description]
            time {[type]} -- [description]
            notes {[type]} -- [description]
            date {[type]} -- [description]
        """
        self.name = name
        self.time = time
        self.notes = notes
        self.date = date
        # the date is not going to be autogenerated in this task. 
        # this way, one can use task class for both done and planned tasks

        
    def longest_input(self):
        """Calculates the length of the longest parameter, when represented as a string.
        
        Returns:
            [int] -- [length of the longest Tack parameter]
        """

        len_name = len(str(self.name))
        len_time = len(str(self.time))
        len_notes = len(str(self.notes))
        len_date = len(str(self.date))

        all_lengths = [len_name, len_time, len_notes, len_date]
        all_lengths.sort()

        return all_lengths[-1]

    def __repr__(self):
        """String representation of a task. Mainly, for printing task to the stdout.
        """
        
        representation = """-------------{}
Name       - {}
Time (min) - {}
Notes      - {}
Date       - {}
-------------{}\n""".format("-" * self.longest_input(),
                            self.name,
                            self.time, 
                            self.notes, 
                            self.date,
                            "-" * self.longest_input())
        return representation

    def as_dictionary(self):
        csv_dictionary = {
            "name" : self.name,
            "time" : self.time,
            "notes" : self.notes,
            "date" : self.date
        }
        return csv_dictionary

    # Search functionality
    def find_by_date(self, date):
        return self.date == date

    def find_by_time(self, time):
        return self.time == time

    def find_by_exact(self, string):
        return self.name == string or self.notes == string



# n = Task(143,2000000004,3765,47899)
# print(n)
# print(n.as_dictionary())
